Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# JMH
- NOTE
<pre>JMH是Java Micro Benchmark Harness的简写，是专门用于代码微基准测试的工具集（toolkit）。
JMH是由实现Java虚拟机的团队开发的，因此他们非常清楚开发者所编写的代码在虚拟机中将会如何执行。
由于现代JVM已经变得越来越智能，在Java文件的编译阶段、类的加载阶段，以及运行阶段都可能进行了不同程度的优化，
因此开发者编写的代码在运行中未必会像自己所预期的那样具有相同的性能体现，
JVM的开发者为了让普通开发者能够了解自己所编写的代码运行的情况，JMH便因此而生。</pre>

## @Benchmark
- NOTE
<pre>与Junit4.x版本需要使用@Test注解标记单元测试方法一样，JMH对基准测试的方法需要使用@Benchmark注解进行标记，
否则方法将被视为普通方法，并且不会对其执行基准测试。如果一个类中没有任何基准测试方法（被@Benchmark标记的方法），
那么对其进行基准测试则会出现异常。</pre>

## Warmup以及Measurement
> leftSide=`true`

- NOTE
<pre>Warmup可直译为“预热”的意思，在JMH中，Warmup所做的就是在基准测试代码正式度量之前，
先对其进行预热，使得代码的执行是经历过了类的早期优化、JVM运行期编译、JIT优化之后的最终状态，
从而能够获得代码真实的性能数据。Measurement则是真正的度量操作，在每一轮的度量中，
所有的度量数据会被纳入统计之中（预热数据不会纳入统计之中）。

通过类注解的方式设置的全局Measurement和Warmup参数是可以被基准测试方法通过同样的方式覆盖的，
但是通过Options进行的全局设置则无法被覆盖，也就是说，通过Options设置的参数会应用于所有的基准测试方法且无法被修改（当然不同的版本可能会存在差异）。</pre>

### 设置全局的Warmup和Measurement
- NOTE
<pre>设置全局的Warmup和Measurement执行批次，既可以通过构造Options时设置，
也可以在对应的class上用相应的注解进行设置。</pre>

#### 构造Options时设置Warmup和Measurement的执行批次

#### 使用@Measurement和@Warmup注解进行设置

###  在基准测试方法上设置Warmup和Measurement

### Warmup和Measurement的输出信息解释
- NOTE
<pre># JMH version: 1.19 -- JMH版本
# VM version: JDK 1.8.0_162, VM 25.162-b12
# VM invoker: D:\Java\jdk1.8.0_162\jre\bin\java.exe
-- JVM运行时指定的参数
# VM options: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/jmh.hprof -javaagent:D:\IntelliJ IDEA 2019.3.3\lib\idea_rt.jar=60135:D:\IntelliJ IDEA 2019.3.3\bin -Dfile.encoding=UTF-8
-- 热身的批次是10，每一个批次都会不断的调用基准方法，每一个批次的执行时间为1秒
# Warmup: 10 iterations, 1 s each
-- 真正度量的批次为10，这10个批次的调用产生的性能数据才会真正地纳入统计，每一个批次的度量执行时间为1秒
# Measurement: 10 iterations, 1 s each
-- 每一个批次的超时时间为10分钟
# Timeout: 10 min per iteration
-- 执行基准测试的线程数量
# Threads: 1 thread, will synchronize iterations
-- Benchmark的Mode，这里表示一个批次的平均时间
# Benchmark mode: Average time, time/op
# Benchmark: com.chenjj.concurrent.jmh.ArrayListVSLinkedListWithJmh.arrayListAdd

# Run progress: 0.00% complete, ETA 00:00:40
# Fork: 1 of 1
-- 执行10个批次的热身，并输出每个批次调用基准方法的平均耗时
# Warmup Iteration   1: 0.032 us/op
# Warmup Iteration   2: 0.017 us/op
# Warmup Iteration   3: 0.051 us/op
# Warmup Iteration   4: 0.016 us/op
# Warmup Iteration   5: 0.018 us/op
# Warmup Iteration   6: 0.016 us/op
# Warmup Iteration   7: 0.016 us/op
# Warmup Iteration   8: 0.015 us/op
# Warmup Iteration   9: 0.015 us/op
# Warmup Iteration  10: 0.022 us/op
-- 执行10个批次的度量，并输出每个批次调用基准方法的平均耗时
Iteration   1: 0.014 us/op
Iteration   2: 0.012 us/op
Iteration   3: 0.012 us/op
Iteration   4: 0.012 us/op
Iteration   5: 0.029 us/op
Iteration   6: 0.036 us/op
Iteration   7: 0.015 us/op
Iteration   8: 0.015 us/op
Iteration   9: 0.010 us/op
Iteration  10: 0.010 us/op

-- 该基准方法执行完后的最终结果
Result &quot;com.chenjj.concurrent.jmh.ArrayListVSLinkedListWithJmh.arrayListAdd&quot;:
  0.016 ±(99.9%) 0.013 us/op [Average]
  (min, avg, max) = (0.010, 0.016, 0.036), stdev = 0.009
  CI (99.9%): [0.003, 0.030] (assumes normal distribution)


# JMH version: 1.19
# VM version: JDK 1.8.0_162, VM 25.162-b12
# VM invoker: D:\Java\jdk1.8.0_162\jre\bin\java.exe
# VM options: -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:/jmh.hprof -javaagent:D:\IntelliJ IDEA 2019.3.3\lib\idea_rt.jar=60135:D:\IntelliJ IDEA 2019.3.3\bin -Dfile.encoding=UTF-8
# Warmup: 10 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.chenjj.concurrent.jmh.ArrayListVSLinkedListWithJmh.linkedListAdd

# Run progress: 50.00% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.591 us/op
# Warmup Iteration   2: 0.591 us/op
# Warmup Iteration   3: 0.093 us/op
# Warmup Iteration   4: 0.354 us/op
# Warmup Iteration   5: 0.091 us/op
# Warmup Iteration   6: 0.314 us/op
# Warmup Iteration   7: 0.410 us/op
# Warmup Iteration   8: 0.083 us/op
# Warmup Iteration   9: 0.327 us/op
# Warmup Iteration  10: 0.085 us/op
Iteration   1: 0.328 us/op
Iteration   2: 0.081 us/op
Iteration   3: 0.343 us/op
Iteration   4: 0.084 us/op
Iteration   5: 0.366 us/op
Iteration   6: 0.085 us/op
Iteration   7: 0.355 us/op
Iteration   8: 0.081 us/op
Iteration   9: 0.330 us/op
Iteration  10: 0.081 us/op


Result &quot;com.chenjj.concurrent.jmh.ArrayListVSLinkedListWithJmh.linkedListAdd&quot;:
  0.213 ±(99.9%) 0.209 us/op [Average]
  (min, avg, max) = (0.081, 0.213, 0.366), stdev = 0.139
  CI (99.9%): [0.004, 0.423] (assumes normal distribution)


# Run complete. Total time: 00:01:26

Benchmark                                   Mode  Cnt  Score   Error  Units
ArrayListVSLinkedListWithJmh.arrayListAdd   avgt   10  0.016 ± 0.013  us/op
ArrayListVSLinkedListWithJmh.linkedListAdd  avgt   10  0.213 ± 0.209  us/op</pre>

## 四大BenchmarkMode
> leftSide=`true`

