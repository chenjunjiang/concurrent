Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 线程池相关
- NOTE
<pre>Thread是一个重量级的资源，创建、启动以及销毁都是比较耗费系统资源的，因为对线程的复用是一种非常好的程序设计习惯，加之系统
中可创建的线程数量是有限的，线程数量和系统性能是一种抛物线的关系，也就是说线程数量达到某个数值的时候，性能反倒会降低很多，
因此对线程的管理，尤其是数量的控制更能直接决定系统的性能。

1、实现线程池的几个关键因素：
   a、线程池线程的初始化大小、核心数、最大数
   b、任务队列，存放提交到线程池的任务，线程会从它里面获取任务执行
   c、线程队列，线程池的线程存放在它里面，会根据情况进行添加和删除线程
   d、拒绝策略，当前线程池中没有空闲线程处理任务了，新提交来的任务该怎么处理
   e、ThreadFactory，线程工厂，可以根据情况来创建线程
   
   
2、线程池复用的原理
　 我们知道，Thread.start()只能调用一次，到run()方法结束，则该线程就到了TERMINATED状态，不能再次调用start。
则要达到复用的目的，则必须从run()方法上入手，可以这样设计run()方法：它本质上是个无限循环，不断到任务队列中取任务，当任务队列中没任务了，
当前工作线程就会进入阻塞状态，直到能取出任务为止，因此这个工作线程是处于阻塞状态的，并不会因为任务队列中没有任务了而被销毁。
这样就保证了线程池有N个线程(N小于等于线程池指定的核心线程数)是活的，可以随时处理任务，从而达到线程复用的目的。
具体代码可以参考我们自己实现线程池中的InternalTask的run()方法，或者是ThreadPoolExecutor的getTask()方法。</pre>

## Executor&ExecutorService详解
- NOTE
<pre>虽然大多数情况下，我们更喜欢将Executor或ExecutorService直接称之为“线程池”，但是事实上这两个
接口只定义了任务（Runnable/Callable）被提交执行的相关接口。由于我们在开发过程中使用得最多
的是任务被提交执行的线程池解决方案，因此很多人一看到Executor或ExecutorService就称其为
“线程池”，这也就不足为奇了。

ExecutorService接口继承自Executor接口，并且提供了更多用于任务提交和管理的一些方法，比如停止任务的执行等

</pre>

### ThreadPoolExecutor
- NOTE
<pre>ThreadPoolExecutor是ExecutorService最为重要、最为常用的一个实现之一，我们通常所说的Java并发包线程池指的就是ThreadPoolExecutor。

ThreadPoolExecutor的构造
public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue&lt;Runnable&gt; workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler)
▪ corePoolSize：用于指定在线程池中维护的核心线程数量，即使当前线程池中的核心线程不工作，
核心线程的数量也不会减少（在JDK1.6版本及以后可以通过设置允许核心线程超时的方法
allowCoreThreadTimeOut来改变这种情况）。
▪ maximumPoolSize：用于设置线程池中允许的线程数量的最大值。
▪ keepAliveTime：当线程池中的线程数量超过核心线程数并且处于空闲时，
线程池将回收一部分线程让出系统资源，该参数可用于设置超过corePoolSize数量的线程在
多长时间后被回收，与unit配合使用。
▪ TimeUnit：用于设定keepAliveTime的时间单位。
▪ workQueue：用于存放已提交至线程池但未被执行的任务。
▪ ThreadFactory：用于创建线程的工厂，开发者可以通过自定义ThreadFactory来创建线程，
比如，根据业务名为线程命名、设置线程优先级、设置线程是否为守护线程等、
设置线程所属的线程组等。
▪ RejectedExecutionHandler：当任务数量超过阻塞队列边界时，这个时候线程池就会拒绝新增
的任务，该参数主要用于设置拒绝策略。
注意：
▪ TimeUnit、workQueue、ThreadFactory、RejectedExecutionHandler不能为null。
▪ corePoolSize可以设置为0，但不能小于0，并且corePoolSize不能大于线程的最大数量（maximumPoolSize）。

线程池被成功构造后，其内部的运行线程并不会立即被创建，ThreadPoolExecutor的核心线程将会
采用一种Lazy（懒）的方式来创建并且运行，当线程池被创建，并且首次调用执行任务方法时才会
创建，并且运行线程。

execute方法逻辑
▪ 线程池中的活跃工作线程数小于核心线程数，提交任务时，线程池会立即创建线程执行该任务，并且该任务
不会被存入任务队列之中。
▪ 当线程池中的活跃（工作）线程大于等于核心线程数量并且任务队列未满时，提交的任务会加入到任务队列，
不会被立即执行，而是等待工作线程空闲时轮询任务队列以获取任务执行。
▪ 当任务队列已满且工作线程小于最大线程数量时，线程池会创建线程执行任务，但是线程数量不会超过最大线程数。
▪ 当任务队列已满且线程池中的工作线程达到最大线程数量，并且此刻没有空闲的工作线程时，
会执行任务拒绝策略，任务将以何种方式被拒绝完全取决于构造ThreadExecutorPool时指定的拒绝策略。
▪ 若线程池中的线程是空闲的且空闲时间达到指定的keepAliveTime时间，线程会被线程池回收
（最多保留corePoolSize数量个线程），当然如果设置允许线程池中的核心线程超时，
那么线程池中所有的工作线程都会被回收。


</pre>

#### ThreadFactory
- NOTE
<pre>在ThreadExecutorPool的构造参数中提供了一个接口ThreadFactory，用于定义线程池中的线程
（Thread），我们可以通过该接口指定线程的命名规则、优先级、是否为daemon守护线程等信息。</pre>

#### 拒绝策略RejectedExecutionHandler
- NOTE
<pre>当线程池中没有空闲的工作线程，并且任务队列已满时，新的任务将被执行拒绝策略（当然，
在线程池状态进行二次检查时，如果发现线程池已经被执行了销毁，那么进入任务队列的任务也
会被移除并且执行拒绝策略），在ThreadPoolExecutor中提供了4种形式的拒绝策略，
当然它还允许开发者自定义拒绝策略。
▪ DiscardPolicy：丢弃策略，任务会被直接无视丢弃而等不到执行，因此该策略需要慎重使用。
▪ AbortPolicy：中止策略，在线程池中使用该策略，在无法受理任务时会抛出拒绝执行异常
RejectedExecutionException（运行时异常）。
▪ DiscardOldestPolicy：丢弃任务队列中最老任务的策略（这是笔者通过类名直译过来的，
事实上这样直译不够准确，通过阻塞队列可知，并不是所有的阻塞队列都是FIFO，
也就是说最早进入任务队列中的任务并不一定是最早（老）的，比如，优先级阻塞队列会根据排序
规则来决定将哪个任务放在队头）。
▪ CallerRunsPolicy：调用者线程执行策略，前面的三种拒绝策略要么会在执行execute方法时抛出异常，
要么会将任务丢弃。该策略不会导致新任务的丢失，但是任务会在当前线程中被阻塞地执行，
也就是说任务不会由线程池中的工作线程执行。</pre>

#### 线程池中多余的线程是如何回收的？
- NOTE
<pre>https://mp.weixin.qq.com/s?__biz=MzIwMzY1OTU1NQ==&amp;mid=2247496950&amp;idx=1&amp;sn=aef946f39fe3645213d999efb17afcd8&amp;chksm=96ceb4baa1b93dac2734afcb27c01671f1427bb5831d824ae41b3c65a8bbc88dece437ee87c5&amp;mpshare=1&amp;scene=24&amp;srcid=1020m3b1apEsCeebS9ysVY7T&amp;sharer_sharetime=1603194389770&amp;sharer_shareid=58714c43bff8d32784ccc2cb555b2c13#rd
源码逻辑主要是查看ThreadPoolExecutor的final void runWorker(Worker w)方法和 private Runnable getTask()方法。</pre>

### ScheduledExecutorService
- NOTE
<pre>ScheduledExecutorService继承自ExecutorService，并且提供了任务被定时执行的特性，
我们可以使用ScheduledExecutorService的实现ScheduledThreadPoolExecutor来完成某些特殊
的任务执行，比如使某任务根据设定的周期来运行，或者在某个指定的时间来执行任务等。</pre>

#### ScheduledThreadPoolExecutor
- NOTE
<pre>ScheduledThreadPoolExecutor继承自ThreadPoolExecutor，同时又实现了定时执行服务
ScheduledExecutorService的所有接口方法。
因此，ScheduledExecutorService既具有ThreadPoolExecutor的所有方法，同时又具备定时执行
任务的方法，在ScheduledExecutorService中定义了4个与schedule相关的方法，用于定时执行任务。
▪ &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable,long delay,TimeUnit unit)：该方法
是一个one-shot方法（只执行一次），任务（callable）会在单位（unit）时间（delay）后被执行，
并且立即返回ScheduledFuture。
▪ ScheduledFuture&lt;?&gt; schedule(Runnable command,long delay,TimeUnit unit)：
该方法同样是一个one-shot方法（只执行一次），任务（runnable）会在单位（unit）时间
（delay）后被执行，虽然也会返回ScheduledFuture，但是并不会包含任何执行结果，
因为Runnable接口的run方法本身就是无返回值类型的接口方法，不过可以通过该Future判断任务
是否执行结束。
▪ ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,longinitialDelay, long period,
 TimeUnit unit)：任务（command）会根据固定的速率（period，时间单位为unit）在时间
 （initialDelay，时间单位为unit）后不断地被执行。
 ▪ ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,long initialDelay,
 long delay,TimeUnit unit)：该方法与前一个方法比较类似，只不过该方法将以固定延迟单位时间的方式执行任务。
 scheduleAtFixedRate：无论任务执行耗时多长时间，任务始终会以固定的速率来执行。
 任务执行的间隔时间都是period。
 scheduleWithFixedDelay：无论执行的开销是多少，下一次任务被执行的时间是延迟固定的时间加上上一个任务执行的时间。</pre>

### 关闭ExecutorService
- NOTE
<pre>如果ExecutorService在接下来的程序执行中将不再被使用，则需要将其关闭以释放工作线程所占用的
系统资源，ExecutorService接口定义了几种不同形式的关闭方式，接下来看看这几种关闭
ExecutorService方式的用法以及不同之处。
1. 有序关闭（shutdown）
shutdown提供了一种有序关闭ExecutorService的方式，当该方法被执行
后新的任务提交将会被拒绝，但是工作线程正在执行的任务以及线程池任务（阻塞）队列中已经被
提交的任务还是会执行，当所有的提交任务都完成后线程池中的工作线程才会销毁进而达到
ExecutorService最终被关闭的目的。该方法是立即返回方法，它并不会阻塞等待所有的任务处理结束
及ExecutorService最终的关闭，因此如果你想要确保线程池彻底被关闭之后才进行下一步的操作，
那么这里可以配合另外一个等待方法awaitTermination使当前线程进入阻塞等待ExecutorService
关闭结束后再进行下一步的动作。

2. 立即关闭（shutdownNow）
shutdownNow方法首先会将线程池状态修改为shutdown状态，然后将未被执行的任务挂起并从任务
队列中排干，其次会尝试中断正在进行任务处理的工作线程，最后返回未被执行的任务，当然，
对一个执行了shutdownNow的线程池提交新的任务同样会被拒绝。

3. 组合关闭（shutdown&amp;shutdownNow）
通常情况下，为了确保线程池被尽可能安全地关闭，我们会采用两种关闭线程池的组合方式，
以尽可能确保正在运行的任务被正常执行的同时又能提高线程池被关闭的成功率。</pre>

###  FixedThreadPool
- NOTE
<pre>调用Executors.newFixedThreadPool(int nThreads)得到
线程池的核心线程数和最大线程数是相等的，因此该线程池中的工作线程数将始终是固定的。
任务队列为LinkedBlockingQueue（无边界），所以理论上提交至线程池的任务始终都会被执行，
只有显式地执行线程池的关闭方法才能关闭线程池。</pre>

###  SingleThreadPool
- NOTE
<pre>调用Executors.newSingleThreadExecutor()得到
SingleThreadPool是只有一个核心线程的线程池，但是Finalizable代理了该线程池，
因此当线程池引用被垃圾回收器回收时，线程池的shutdown方法会被执行，
当然我们还是建议显式地调用线程池的关闭方法。

static class FinalizableDelegatedExecutorService
        extends DelegatedExecutorService {
        FinalizableDelegatedExecutorService(ExecutorService executor) {
            super(executor);
        }
        protected void finalize() {
            super.shutdown();
        }
    }</pre>

### CachedThreadPool
- NOTE
<pre>CachedThreadPool根据需要创建新线程，但会重用以前构造的可用线程。
该线程池通常会用于提高执行量大的、耗时较短的、异步任务程序的运行性能，
在该线程池中，如果有可用的线程将被直接重用。如果没有可用的线程，
则会创建一个新线程并将其添加到池中。未被使用且空闲时间超过60秒的线程将被终止并从
线程池中移除，因此长时间空闲的线程不会消耗任何资源。</pre>

### ScheduledThreadPool
- NOTE
<pre>关于创建指定核心线程数量的ScheduledExecutorService，由于其很容易理解，所以此处不再赘述。</pre>

### WorkStealingPool
- NOTE
<pre>WorkStealingPool是在JDK1.8版本中引入的线程池，它的返回结果是ForkJoinPool，
而不是ScheduledThreadPoolService或ThreadPoolExecutor。与其他线程池不同的是，
WorkStealingPool中的工作线程会处理任务队列中与之对应的任务分片（Divide and conquer：
分而治之），如果某个线程处理的任务执行比较耗时，
那么它所负责的任务将会被其他线程“窃取”执行，进而提高并发处理的效率。</pre>

## 线程池的状态
> leftSide=`true`

- NOTE
<pre>线程池的5种状态：Running、ShutDown、Stop、Tidying、Terminated。ThreadPoolExecutor里面有定义。

1、RUNNING
(1) 状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。 
(2) 状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态，
并且线程池中的任务数为0！
private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));

2、 SHUTDOWN
(1) 状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。 
(2) 状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -&gt; SHUTDOWN。

3、STOP
(1) 状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。 
(2) 状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -&gt; STOP。

4、TIDYING
(1) 状态说明：当所有的任务已终止，ctl记录的”任务数量”为0，工作线程数为0，线程池会变为TIDYING状态。当线程池变为
TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，
若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。 
(2) 状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 
SHUTDOWN -&gt; TIDYING。 当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -&gt; TIDYING。

5、 TERMINATED
(1) 状态说明：线程池彻底终止，就变成TERMINATED状态。 
(2) 状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。

通过ThreadPoolExecutor的源码可以清楚的知道以上5种状态的转变。

* The runState provides the main lifecycle control, taking on values:
     *
     *   RUNNING:  Accept new tasks and process queued tasks
     *   SHUTDOWN: Don't accept new tasks, but process queued tasks
     *   STOP:     Don't accept new tasks, don't process queued tasks,
     *             and interrupt in-progress tasks
     *   TIDYING:  All tasks have terminated, workerCount is zero,
     *             the thread transitioning to state TIDYING
     *             will run the terminated() hook method
     *   TERMINATED: terminated() has completed
     *
     * The numerical order among these values matters, to allow
     * ordered comparisons. The runState monotonically increases over
     * time, but need not hit each state. The transitions are:
     *
     * RUNNING -&gt; SHUTDOWN
     *    On invocation of shutdown(), perhaps implicitly in finalize()
     * (RUNNING or SHUTDOWN) -&gt; STOP
     *    On invocation of shutdownNow()
     * SHUTDOWN -&gt; TIDYING
     *    When both queue and pool are empty
     * STOP -&gt; TIDYING
     *    When pool is empty
     * TIDYING -&gt; TERMINATED
     *    When the terminated() hook method has completed
</pre>

## Future和Callback
> leftSide=`true`

- NOTE
<pre>简单来说，Future代表着一个异步任务在未来的执行结果，这个结果可以在最终的某个时间节点通过
Future的get方法来获得。对于长时间运行的任务来说，使其异步执行并立即返回一个Future接口是
一种比较不错的选择，因为这样可以允许程序在等待结果的同时继续去执行其他的任务，
比如如下这些任务：
▪ 密集型计算（数学和科学计算）。
▪ 针对大数据的处理计算。
▪ 通过远程方法调用数据。
Future接口也是在JDK1.5版本中随着并发包一起被引入JDK的，Future接口的定义如下所示（共包含5个接口方法）：
 boolean cancel(boolean mayInterruptIfRunning)：
 取消任务的执行，如果mayInterruptIfRunning为true，则工作线程会被中断，否则，即使执行了cancel
 方法，也会等待其完成。
 
boolean isCancelled()：
判断异步任务是否取消。

boolean isDone()：
判断异步任务的执行是否结束。

V get() throws InterruptedException, ExecutionException;
获取异步任务的结果，如果任务未运行结束，则该方法会使当前线程阻塞。

V get(long timeout, TimeUnit unit)
        throws InterruptedException, ExecutionException, TimeoutException;
同get()，但是允许设置最大超时时间。

▪ 取消异步正在执行的任务：
如果一个异步任务的运行特别耗时，那么Future是允许对其进行取消操作的。 

▪ Callable接口：该接口与Runnable接口非常相似，但是Runnable作为任务接口最大的问题就是
无法返回最终的计算结果，因此在JDK1.5版本中引入了Callable泛型接口，它允许任务执行结束后
返回结果。

▪ 任务执行错误：Runnable类型的任务中，run() 方法抛出的异常（运行时异常, run方法的定义不能抛出checked异常）只能被运行它
的线程捕获（有可能会导致运行线程死亡），但是启动运行线程的主线程却很难获得Runnable任务
运行时出现的异常信息。我们可以通过设置UncaughtExceptionHandler的方式来捕获异常，
但是这种方式的确不够优雅，并且也无法精确地知道是执行哪个任务时出现的错误，
Future则是通过捕获get方法异常的方式来获取异步任务执行的错误信息的。
</pre>

### ExecutorService与Future
- NOTE
<pre>1. 提交Runnable类型任务Submit方法除了可以提交执行Callable类型的任务之外，还可以提交
Runnable类型的任务并且有两种重载形式，具体如下。
▪ public Future&lt;?&gt; submit(Runnable task)：提交Runnable类型的任务并且返回Future，
待任务执行结束后，通过该future的get方法返回的结果始终为null。
▪ public &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result)：前一个提交Runnable类型的任务
虽然会返回Future，但是任务结束之后通过future却拿不到任务的执行结果，
而通过该submit方法则可以。

2. invokeAny
ExecutorService允许一次性提交一批任务，但是其只关心第一个完成的任务和结果，
比如，我们要获取某城市当天天气情况的服务信息，在该服务中，我们需要调用不同的服务提供商接口，
最快返回的那条数据将会是显示在APP或者Web前端的天气情况信息，这样做的好处是可以提高系统
响应速度，提升用户体验。invokeAny是一个阻塞方法，它会一直等待直到有一个任务完成。
在ExecutorService中还提供了invokeAny的重载方法，该方法允许执行任务的超时设置。

3. invokeAll
invokeAll方法同样可用于异步处理批量的任务，但是该方法关心所有异步任务的运行，
invokeAll方法同样也是阻塞方法，一直等待所有的异步任务执行结束并返回结果。
ExecutorService还提供了invokeAll方法的重载形式，增加了超时特性。</pre>

### Future的不足之处
- NOTE
<pre>Future的不足之处包括如下几项内容。
▪ 无法被动接收异步任务的计算结果：虽然我们可以主动将异步任务提交给线程池中的线程来执行，
但是待异步任务结束后，主（当前）线程无法得到任务完成与否的通知，它需要通过get方法主动获取
计算结果。
▪ Future间彼此孤立：有时某一个耗时很长的异步任务执行结束以后，你还想利用它返回的结果再做
进一步的运算，该运算也会是一个异步任务，两者之间的关系需要程序开发人员手动进行绑定赋予，
Future并不能将其形成一个任务流（pipeline），每一个Future彼此之间都是孤立的，
后面要介绍的CompletableFuture就可以将多个Future串联起来形成任务流（pipeline）。
▪ Future没有很好的错误处理机制：截至目前，如果某个异步任务在执行的过程中发生了异常错误，
调用者无法被动获知，必须通过捕获get方法的异常才能知道异步任务是否出现了错误，
从而再做进一步的处理。</pre>

### Google Guava的Future
- NOTE
<pre>Future虽然为我们提供了一个凭据，但是在未来某个时间节点进行get()操作时仍然会使当前线程进入
阻塞，显然这种操作方式并不是十分完美，因此在Google Guava并发包中提供了对异步任务执行的
回调支持，它允许你注册回调函数而不用再通过get()方法苦苦等待异步任务的最终计算结果
（Don't CallUs, We'll Call You!）。
1. ListenableFuture
Guava提供了ListneningExecutorService，使用该ExecutorService提交执行异步任务时将返回
ListenableFuture，通过该Future，我们可以注册回调接口。

2. FutureCallback除了ListenableFuture之外，还可以注册FutureCallback，相比前者用
Runnable接口作为回调接口，FutureCallback提供的回调方式则更为直观。
</pre>

## ForkJoinPool
- NOTE
<pre>Fork/Join框架是在JDK1.7版本中被Doug Lea引入的，Fork/Join计算模型旨在充分利用多核CPU的
并行运算能力，将一个复杂的任务拆分（fork）成若干个并行计算，然后将结果合并（join）。

在JDK中，Fork/Join框架的实现为ForkJoinPool及ForkJoinTask等，虽然这些API在日常工作中的
使用并不是非常频繁，但是在很多更高一级的JVM开发语言（比如，Scala、Clojure等函数式
开发语言）底层都有ForkJoinPool的身影，在Java 1.8中引入的Parallel Stream其底层的并行
计算也是由ForkJoinPool来完成的。

“分而治之”（divide and conquer）是Fork/Join框架的核心思想，Forks通过递归的形式将任务拆分
成较小的独立的子任务，直到它足够简单以至于可以在一个异步任务中完成为止；Join则通过递归
的方式将所有子任务的若干结果合并成一个结果，或者在子任务不关心结果是否返回的情况下，
Join将等待所有的子任务完成各自的异步任务后“合并计算结果”，然后逐层向上汇总，直到将最终
结果返回给执行线程。

ForkJoinPool是Fork/Join Framework在Java中的实现，同时它也是该框架最核心的类之一，
ForkJoinPool是ExecutorService的一个具体实现，用于管理工作线程并为我们提供工具以及
获取有关线程池状态和性能的信息等。ForkJoinTask是在ForkJoinPool内部执行的任务的基本类型，
在ForkJoinPool中运行着的任务无论是RecursiveTask还是RecursiveAction都是
ForkJoinTask的子类，前者在子任务运行结束后会返回计算结果，后者则不会有任何返回，
而只是专注于子任务的运行本身。

1. RecursiveTaskRecursiveTask任务类型除了进行子任务的运算之外，还会将最终子任务的计算结果
返回。
2. RecursiveActionRecursiveAction类型的任务与RecursiveTask比较类似，只不过它更关注于
子任务是否运行结束，不会有返回值。

无论是RecursiveTask还是RecursiveAction，对任务的拆分与合并都是在compute方法中进行的，
可见该方法的职责（fork，join，计算）太重，不够单一，且可测试性比较差，因此在Java 8版本中
提供了接口Spliterator，其对任务的拆分有了进一步的高度抽象。
</pre>

## CompletionService
> leftSide=`true`

- NOTE
<pre>ExecutorService执行批量任务的缺陷
Future除了“调用者线程需要持续对其进行关注才能获得结果”这个缺陷之外，还有一个更为棘手的
问题在于，当通过ExecutorService的批量任务执行方法invokeAll来执行一批任务时，无法第一时间
获取最先完成异步任务的返回结果。参见ExecutorServiceInvokeAllTest。

CompletionService很好地解决了异步任务的问题，在CompletionService中提供了提交异步任务的
方法（真正的异步任务执行还是由其内部的ExecutorService完成的），任务提交之后调用者不再关注
Future，而是从BlockingQueue中获取已经执行完成的Future，在异步任务完成之后Future才会被
插入阻塞队列，也就是说调用者从阻塞队列中获取的Future是已经完成了的异步执行任务，所以再次
通过Future的get方法获取结果时，调用者所在的当前线程将不会被阻塞。

▪ CompletionService的构造：
CompletionService并不具备异步执行任务的能力，因此要构造CompletionService则需要
ExecutorService，当然还允许指定不同的BlockingQueue实现。
· ExecutorCompletionService(Executor executor)：
BlockingQueue默认为LinkedBlockingQueue（可选边界）。
· ExecutorCompletionService(Executorexecutor,BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue)：
允许在构造时指定不同的BlockingQueue。
▪ 提交Callable类型的任务
▪ 提交Runnable类型的任务：除了提交Callable类型的任务之外，在CompletionService中还可以
提交Runnable类型的任务，但是返回结果仍旧需要在提交任务方法时指定。
▪ 立即返回方法Future&lt;V&gt; poll()：从CompletionService的阻塞队列中获取已执行完成的Future，
如果此刻没有一个任务完成则会立即返回null值。
▪ Future&lt;V&gt; poll(long timeout, TimeUnit unit)：同上，指定了超时设置。
▪ 阻塞方法Future&lt;V&gt; take() throws InterruptedException：会使当前线程阻塞，
直到在CompletionService中的阻塞队列有完成的异步任务Future。</pre>

## CompletableFuture
- NOTE
<pre>CompletableFuture是自JDK1.8版本中引入的新的Future，常用于异步编程之中，所谓异步编程，
简单来说就是：“程序运算与应用程序的主线程在不同的线程上完成，并且程序运算的线程能够向
主线程通知其进度，以及成功失败与否的非阻塞式编码方式”，这句话听起来与ExecutorService提交
异步执行任务并没有多大的区别，但是别忘了，无论是ExecutorService还是CompletionService，
都需要主线程主动地获取异步任务执行的最终计算结果，如此看来，Google Guava所提供的
ListenableFuture更符合这段话的描述，但是ListenableFuture无法将计算的结果进行异步任务的
级联并行运算，甚至构成一个异步任务并行运算的pipeline，但是这一切在CompletableFuture中
都得到了很好的支持。

CompletableFuture实现自CompletionStage接口，可以简单地认为，该接口是同步或者异步任务
完成的某个阶段，它可以是整个任务管道中的最后一个阶段，甚至可以是管道中的某一个阶段，
这就意味着可以将多个CompletionStage链接在一起形成一个异步任务链，前置任务执行结束之后
会自动触发下一个阶段任务的执行。另外，CompletableFuture还实现了Future接口，所以你可以
像使用Future一样使用它。CompletableFuture中包含了50多个方法，这一数字在JDK1.9版本中
还得到了进一步的增加，这些方法可用于Future之间的组合、合并、任务的异步执行，
多个Future的并行计算以及任务执行发生异常的错误处理等。

CompletableFuture的方法中，大多数入参都是函数式接口，比如Supplier、Function、
BiFunction、Consumer等，因此熟练理解这些函数式接口是灵活使用CompletableFuture的
前提和基础，同时CompletableFuture之所以能够异步执行任务，主要归功于其内部的
ExecutorService，默认情况下为ForkJoinPool.commonPool()，当然也允许开发者显式地指定。

当然，CompletableFuture除了具备Future的基本特性之外，还可以直接使用它执行异步任务，
通常情况下，任务的类型为Supplier和Runnable，前者非常类似于Callable接口，
可返回指定类型的运算结果，后者则仍旧只是关注异步任务运行本身。
▪ 异步执行Supplier类型的任务：可以直接调用CompletableFuture的静态方法supplyAsync异步
执行Supplier类型的任务。

异步任务链
CompletableFuture还允许将执行的异步任务结果继续交由下一级任务来执行，下一级任务还可以
有下一级，以此类推，这样就可以形成一个异步任务链或者任务pipeline。
▪ thenApply：以同步的方式继续处理上一个异步任务的结果。
▪ thenApplyAsync：以异步的方式继续处理上一个异步任务的结果。
▪ thenAccept：以同步的方式消费上一个异步任务的结果。
▪ thenAcceptAsync：以异步的方式消费上一个异步任务的结果。
在任务链的末端，如果执行的任务既不想对上一个任务的输出做进一步的处理，又不想消费上一个
任务的输出结果，那么我们可以使用thenRun或者thenRunSync方法来执行Runnable任务。
▪ thenRun：以同步的方式执行Runnable任务。
▪ thenRunAsync：以异步的方式执行Runnable任务。

合并多个Future
CompletableFuture还允许将若干个Future合并成为一个Future的使用方式，可以通过
thenCompose方法或者thenCombine方法来实现多个Future的合并。

多Future的并行计算
如果想要多个独立的CompletableFuture同时并行执行，那么我们还可以借助于allOf()方法来完成，
其有点类似于ExecutorService的invokeAll批量提交异步任务。
如果只想运行一批Future中的一个任务，那么我们又该怎么办呢？只需要用anyOf方法替代
allOf方法即可（这一点非常类似于ExecutorService的invokeAny方法），无论是allOf方法还是
anyOf方法返回的CompletableFuture类型都是Void类型，如果你试图使用合并后的Future获取
异步任务的计算结果，那么这将是不可能的，必须在每一个单独的Future链中增加上游任务结果
的消费或下游处理任务才可以。

错误处理
CompletableFuture对于异常的处理方式比普通的Future要优雅合理很多，它提供了handle方法，
可用于接受上游任务计算过程中出现的异常错误，这样一来，我们便可以不用将错误的处理逻辑写
在try...catch...语句块中了，更不需要只能通过Future的get方法调用才能得知异常错误的发生。

</pre>
